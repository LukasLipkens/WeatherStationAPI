// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UCLL.Projects.WeatherStations.Shared.Data;

#nullable disable

namespace UCLL.Projects.WeatherStations.WebApi.Migrations
{
    [DbContext(typeof(WeatherstationsContext))]
    [Migration("20241106122222_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UCLL.Projects.WeatherStations.WebApi.Models.Measurement", b =>
                {
                    b.Property<string>("StationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SensorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("StationId", "SensorId", "Timestamp");

                    b.HasIndex("SensorId");

                    b.ToTable("Measurements");

                    b.HasData(
                        new
                        {
                            StationId = "1",
                            SensorId = 1,
                            Timestamp = new DateTime(2024, 11, 4, 12, 22, 21, 797, DateTimeKind.Utc).AddTicks(7343),
                            Value = 23.5
                        },
                        new
                        {
                            StationId = "1",
                            SensorId = 2,
                            Timestamp = new DateTime(2024, 11, 4, 12, 22, 21, 797, DateTimeKind.Utc).AddTicks(7358),
                            Value = 60.0
                        },
                        new
                        {
                            StationId = "1",
                            SensorId = 1,
                            Timestamp = new DateTime(2024, 11, 5, 12, 22, 21, 797, DateTimeKind.Utc).AddTicks(7358),
                            Value = 22.5
                        },
                        new
                        {
                            StationId = "1",
                            SensorId = 2,
                            Timestamp = new DateTime(2024, 11, 5, 12, 22, 21, 797, DateTimeKind.Utc).AddTicks(7359),
                            Value = 58.0
                        },
                        new
                        {
                            StationId = "2",
                            SensorId = 1,
                            Timestamp = new DateTime(2024, 11, 4, 12, 22, 21, 797, DateTimeKind.Utc).AddTicks(7360),
                            Value = 19.199999999999999
                        },
                        new
                        {
                            StationId = "2",
                            SensorId = 2,
                            Timestamp = new DateTime(2024, 11, 4, 12, 22, 21, 797, DateTimeKind.Utc).AddTicks(7361),
                            Value = 61.0
                        },
                        new
                        {
                            StationId = "2",
                            SensorId = 1,
                            Timestamp = new DateTime(2024, 11, 6, 6, 22, 21, 797, DateTimeKind.Utc).AddTicks(7362),
                            Value = 18.199999999999999
                        },
                        new
                        {
                            StationId = "2",
                            SensorId = 2,
                            Timestamp = new DateTime(2024, 11, 6, 6, 22, 21, 797, DateTimeKind.Utc).AddTicks(7363),
                            Value = 57.0
                        });
                });

            modelBuilder.Entity("UCLL.Projects.WeatherStations.WebApi.Models.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sensors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Temperature",
                            Unit = "Celsius"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Humidity",
                            Unit = "%"
                        });
                });

            modelBuilder.Entity("UCLL.Projects.WeatherStations.WebApi.Models.Station", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stations");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Description = "Weather station in New York",
                            Latitude = 40.712800000000001,
                            Longitude = -74.006,
                            Name = "Station A"
                        },
                        new
                        {
                            Id = "2",
                            Description = "Weather station in Los Angeles",
                            Latitude = 34.052199999999999,
                            Longitude = -118.2437,
                            Name = "Station B"
                        });
                });

            modelBuilder.Entity("UCLL.Projects.WeatherStations.WebApi.Models.Station_Sensor", b =>
                {
                    b.Property<string>("StationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SensorId")
                        .HasColumnType("int");

                    b.HasKey("StationId", "SensorId");

                    b.HasIndex("SensorId");

                    b.ToTable("Station_Sensors");

                    b.HasData(
                        new
                        {
                            StationId = "1",
                            SensorId = 1
                        },
                        new
                        {
                            StationId = "1",
                            SensorId = 2
                        },
                        new
                        {
                            StationId = "2",
                            SensorId = 1
                        },
                        new
                        {
                            StationId = "2",
                            SensorId = 2
                        });
                });

            modelBuilder.Entity("UCLL.Projects.WeatherStations.WebApi.Models.Measurement", b =>
                {
                    b.HasOne("UCLL.Projects.WeatherStations.WebApi.Models.Sensor", null)
                        .WithMany("Measurements")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UCLL.Projects.WeatherStations.WebApi.Models.Station", null)
                        .WithMany("Measurements")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UCLL.Projects.WeatherStations.WebApi.Models.Station_Sensor", b =>
                {
                    b.HasOne("UCLL.Projects.WeatherStations.WebApi.Models.Sensor", "Sensor")
                        .WithMany("Station_Sensors")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UCLL.Projects.WeatherStations.WebApi.Models.Station", "Station")
                        .WithMany("Station_Sensors")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("UCLL.Projects.WeatherStations.WebApi.Models.Sensor", b =>
                {
                    b.Navigation("Measurements");

                    b.Navigation("Station_Sensors");
                });

            modelBuilder.Entity("UCLL.Projects.WeatherStations.WebApi.Models.Station", b =>
                {
                    b.Navigation("Measurements");

                    b.Navigation("Station_Sensors");
                });
#pragma warning restore 612, 618
        }
    }
}